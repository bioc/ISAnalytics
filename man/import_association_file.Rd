% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import-functions.R
\name{import_association_file}
\alias{import_association_file}
\title{Import the association file from disk}
\usage{
import_association_file(
  path,
  root = NULL,
  tp_padding = 4,
  dates_format = "ymd",
  separator = "\\t",
  filter_for = NULL,
  import_iss = FALSE,
  export_widget_path = NULL,
  convert_tp = TRUE,
  ...
)
}
\arguments{
\item{path}{The path on disk to the association file.}

\item{root}{The path on disk of the root folder of Vispa2 output or NULL.
See details.}

\item{tp_padding}{Timepoint padding, indicates the number of digits of the
"Timepoint" column once imported. Fills the content with 0s up to the length
specified (ex: 1 becomes 0001 with a tp_padding of 4)}

\item{dates_format}{A single string indicating how dates should be parsed.
Must be a value in: \code{date_formats()}}

\item{separator}{The column separator used in the file}

\item{filter_for}{A named list where names represent column names that
must be filtered. For example: \verb{list(ProjectID = c("PROJECT1", "PROJECT2))}
will filter the association file so that it contains only those rows
for which the value of the column "ProjectID" is one of the specified
values. If multiple columns are present in the list all filtering
conditions are applied as a logical AND.}

\item{import_iss}{Import Vispa2 stats and merge them with the
association file?}

\item{export_widget_path}{A path on disk to save produced widgets or NULL
if the user doesn't wish to save the html file}

\item{convert_tp}{Should be time points be converted into months and
years?}

\item{...}{Additional arguments to pass to \code{\link{import_Vispa2_stats}}}
}
\value{
A tibble with the contents of the association file plus columns
containing the path in the file system for every project and pool if found.
}
\description{
\lifecycle{maturing}
Imports the association file and immediately performs a check on
the file system starting from the root to assess the alignment between the
two.
}
\details{
The import series of functions is designed to work in combination
with the use of Vispa2 pipeline, please refer to this article for more
details: \href{https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5702242/}{VISPA2:
A Scalable Pipeline for High-Throughput Identification
and Annotation of Vector Integration Sites}.\cr
The pipeline automatically produces an hierarchical structure in the file
system which follows this schema:
\itemize{
\item /root_folder
\itemize{
\item Optional intermediate folders
\itemize{
\item ProjectID\cr
|_bam\cr
|_bcmuxall\cr
|_bed\cr
|_iss\cr
|_quality\cr
|_report\cr
|_quantification\cr
*|___concatenatePoolIDSeqRun\cr
}
}
}

For each ProjectID there may be several nested PoolIDs. The alignment
function only looks for PoolIDs in the quantification folder, since it's
the location of the matrices to import.
For more details on how to properly use these functions, refer to the
vignette - vignette("how_to_import_functions").\cr
If 'NULL' the file system alignment step is skipped.
}
\examples{
op <- options("ISAnalytics.widgets" = FALSE)
path <- system.file("extdata", "ex_association_file.tsv",
    package = "ISAnalytics"
)
root_pth <- system.file("extdata", "fs.zip", package = "ISAnalytics")
root <- unzip_file_system(root_pth, "fs")
association_file <- import_association_file(path, root, dates_format = "dmy")
options(op)
}
\seealso{
\code{\link{date_formats}}

Other Import functions: 
\code{\link{import_Vispa2_stats}()},
\code{\link{import_parallel_Vispa2Matrices_auto}()},
\code{\link{import_parallel_Vispa2Matrices_interactive}()},
\code{\link{import_single_Vispa2Matrix}()}
}
\concept{Import functions}
